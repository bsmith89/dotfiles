# export TMPDIR=/scratch/$USER
# mkdir -p $TMPDIR

# Append /usr/local/bin to the front of the PATH for homebrew
# as well as /usr/local/opt/coreutils/libexec/gnubin
# for the homebrew installation of core GNU utils.
# as well as the gnu-sed install.
export HOMEBREW_PREFIX="$HOME/.linuxbrew"
export HOMEBREW_CELLAR="$HOMEBREW_PREFIX/Cellar"
export HOMEBREW_REPOSITORY="$HOMEBREW_PREFIX/Homebrew"
export PATH="$HOMEBREW_PREFIX/bin:$HOME/.linuxbrew/sbin:$PATH"
export MANPATH="$HOMEBREW_PREFIX/share/man:$MANPATH"
export INFOPATH="$HOMEBREW_PREFIX/share/info:$INFOPATH"

# Bash completion through homebrew formula
export PKG_CONFIG_PATH="/usr/share/pkgconfig:$PKG_CONFIG_PATH"
[[ -r "$HOMEBREW_PREFIX/etc/profile.d/bash_completion.sh" ]] && . "$HOMEBREW_PREFIX/etc/profile.d/bash_completion.sh"

# Append /usr/local/opt/coreutils/libexec/gnuman to the MANPATH
# for the homebrew installation of core GNU utils.
export MANPATH=/usr/local/opt/coreutils/libexec/gnuman:$MANPATH

export EDITOR=vim
alias vim='nvim'

source "$HOME/anaconda3/etc/profile.d/conda.sh"
export PATH="$HOME/anaconda3/bin:$PATH"

# See https://development.robinwinslow.uk/2012/07/20/tmux-and-ssh-auto-login-with-ssh-agent-finally/
if [ -z "$TMUX" ]; then
    # we're not in a tmux session

    if [ ! -z "$SSH_TTY" ]; then
        # We logged in via SSH

        # if ssh auth variable is missing
        if [ -z "$SSH_AUTH_SOCK" ]; then
            export SSH_AUTH_SOCK="$HOME/.ssh/.auth_socket"
        fi

        # if socket is available create the new auth session
        if [ ! -S "$SSH_AUTH_SOCK" ]; then
            `ssh-agent -a $SSH_AUTH_SOCK` > /dev/null 2>&1
            echo $SSH_AGENT_PID > $HOME/.ssh/.auth_pid
            # Add all default keys to ssh auth
            ssh-add 2>/dev/null
        fi

        # if agent isn't defined, recreate it from pid file
        if [ -z "$SSH_AGENT_PID" ]; then
            export SSH_AGENT_PID=`cat $HOME/.ssh/.auth_pid`
        fi

        # Add all default keys to ssh auth
        # ssh-add 2>/dev/null
    fi
fi

alias activate="source ./env"


qdel_all() {
    pat=${1:-/.*/}
    del_details=$(qstat | sed '1,2d' | awk -v pat=pat '$5~pat')
    echo "$del_details"
    echo
    echo "Are you sure you want to delete all jobs listed above?"
    read -p "y/[n]: " response
    if [ "$response" = "y" ]
    then
        echo "$del_details" | awk '{print $1}' | xargs qdel
    fi
            }

export DRMAA_LIBRARY_PATH=/opt/sge/lib/lx-amd64/libdrmaa.so.1.0
